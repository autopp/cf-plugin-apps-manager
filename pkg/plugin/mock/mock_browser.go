// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/autopp/cf-plugin-apps-manager/pkg/plugin (interfaces: Browser)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrowser is a mock of Browser interface.
type MockBrowser struct {
	ctrl     *gomock.Controller
	recorder *MockBrowserMockRecorder
}

// MockBrowserMockRecorder is the mock recorder for MockBrowser.
type MockBrowserMockRecorder struct {
	mock *MockBrowser
}

// NewMockBrowser creates a new mock instance.
func NewMockBrowser(ctrl *gomock.Controller) *MockBrowser {
	mock := &MockBrowser{ctrl: ctrl}
	mock.recorder = &MockBrowserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrowser) EXPECT() *MockBrowserMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockBrowser) Open(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockBrowserMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockBrowser)(nil).Open), arg0)
}
